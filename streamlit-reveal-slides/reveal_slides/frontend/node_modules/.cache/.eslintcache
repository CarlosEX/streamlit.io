[{"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/src/index.tsx":"1","/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/src/RevealSlides.tsx":"2"},{"size":220,"mtime":1684362756751,"results":"3","hashOfConfig":"4"},{"size":10007,"mtime":1684623927410,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"101m9tx",{"filePath":"9","messages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/src/index.tsx",[],["12","13"],"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/src/RevealSlides.tsx",["14","15","16"],"import {\n  Streamlit,\n  ComponentProps,\n  withStreamlitConnection,\n  Theme,\n} from \"streamlit-component-lib\"\nimport { useEffect, useMemo } from \"react\"\n\n\nimport Reveal from 'reveal.js';\nimport RevealMarkdown from 'reveal.js/plugin/markdown/markdown';\nimport RevealHighlight from 'reveal.js/plugin/highlight/highlight';\nimport RevealMath from 'reveal.js/plugin/math/math';\nimport RevealSearch from 'reveal.js/plugin/search/search';\nimport RevealNotes from 'reveal.js/plugin/notes/notes';\nimport RevealZoom from 'reveal.js/plugin/zoom/zoom';\n\n\nimport 'reveal.js/dist/reveal.css';\nimport 'reveal.js/plugin/highlight/monokai.css';\n\ninterface RevealSlidesProps extends ComponentProps {\n  args: any\n  width: number\n  disabled: boolean\n  theme?: Theme\n}\n\nconst includedPlugins = {\"RevealMarkdown\": RevealMarkdown, \"RevealHighlight\": RevealHighlight, \"RevealMath.KaTeX\": RevealMath.KaTeX, \"RevealMath.MathJax2\": RevealMath.MathJax2, \"RevealMath.MathJax3\": RevealMath.MathJax3, \"RevealSearch\": RevealSearch, \"RevealNotes\": RevealNotes, \"RevealZoom\": RevealZoom}\n// const simpleCommands = {\"left\": Reveal.left, \"right\": () => {Reveal.right()}, \"up\": Reveal.up, \"down\": Reveal.down, \"prev\": Reveal.prev, \"next\": Reveal.next, \"prevFragment\": Reveal.prevFragment, \"nextFragment\": Reveal.nextFragment, \"togglePause\": Reveal.togglePause, \"toggleAutoSlide\": Reveal.toggleAutoSlide, \"toggleHelp\": Reveal.toggleHelp, \"toggleOverview\": Reveal.toggleOverview, \"shuffle\": Reveal.shuffle}\n// const commandsWithArgs = {slide: Reveal.slide, togglePause: Reveal.togglePause, toggleAutoSlide: Reveal.toggleAutoSlide, toggleHelp: Reveal.toggleHelp, toggleOverview: Reveal.toggleOverview}\n\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nconst RevealSlides = ({ args, disabled }: RevealSlidesProps) => {   \n\n  let configStr = JSON.stringify(args[\"config\"])\n  // const commandStr = JSON.stringify(args[\"commands\"])\n\n  const setupConfig = (configString: string) : object => {\n    const config = JSON.parse(configStr)\n    // code to run after render goes here\n    if (args[\"allow_unsafe_html\"]) {\n      // do nothing\n    }\n    else {\n      if ('plugins' in config){\n        var arr = config['plugins'];\n        arr.forEach(function(moduleName: string, index: number) {\n          if (moduleName in includedPlugins){\n            arr[index] = (includedPlugins as any)[moduleName];\n          }\n          else {\n            arr[index] = null;\n          }\n        });\n        config['plugins'] = arr.filter((x:any) => !!x) as any[];\n        if(!config['plugins'].includes(RevealMarkdown)){\n          config['plugins'].push(RevealMarkdown);\n        }\n      }\n      else {\n        config['plugins'] = [RevealMarkdown];\n      }\n    }\n    return config;\n  }\n\n  useMemo(()=>{\n    // code to run on component mount goes here\n\n    // To do: remove or disable previously imported css. When the list of\n    // css imports exceed about 25, the page no longer updates.\n    import('../node_modules/reveal.js/dist/theme/' + args.theme + '.css')\n\n    // To do: figure out a way to get a callback after new css is applied\n    // The following code is a hack to get around the fact that the new css\n    // is not applied immediately\n    setTimeout(() => {\n      try{\n        Reveal.layout();\n      }\n      catch (e){\n        console.warn(\"Reveal.layout() call failed.\")\n      }\n    }, 100);\n\n  }, [args.theme]);\n\n  useEffect(() => {\n    const config = setupConfig(configStr)\n    \n    try {\n      Reveal.destroy();\n    }\n    catch (e) {\n    }\n    Reveal.initialize(config).then(() => {\n      // reveal.js is ready \n\n    // For some yet to be determined reason, the highlight plugin is not initialized.\n    // Setting highlight config option highlightOnLoad to true (before passing to initialize function)\n    // does not work\n    // To Do: make sure the highlight plugin only changes the HTML involving the code once instead of many times.\n    // Possible solution is to make a change to the plugin init function.\n    let highlighter = Reveal.getPlugin('highlight') as any;\n    if (highlighter){\n      highlighter.init(Reveal);\n    }\n\n      // Send slide position indecies back to Streamlit on initialization and on slide change\n      const currState = Reveal.getState();\n      Streamlit.setComponentValue(currState);\n      Reveal.on( 'slidechanged', event => {\n\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue({indexh: (event as any).indexh, indexv: (event as any).indexv, indexf: tempState.indexf, paused: tempState.paused, overview: tempState.overview});\n      });\n      \n      Reveal.on( 'fragmentshown', event => {\n        // event.fragment = the fragment DOM element\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue(tempState);\n      } );\n      Reveal.on( 'fragmenthidden', event => {\n        // event.fragment = the fragment DOM element\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue(tempState);\n      } );\n      Reveal.on( 'overviewshown', event => {\n        // event.overview = the overview DOM element\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue(tempState);\n      } );\n      Reveal.on( 'overviewhidden', event => {\n        // event.overview = the overview DOM element\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue(tempState);\n      } );\n      Reveal.on( 'paused', event => {\n        // event.fragment = the fragment DOM element\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue(tempState);\n      } );\n      Reveal.on( 'resumed', event => {\n        // event.fragment = the fragment DOM element\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue(tempState);\n      } );\n\n    });\n\n    return () => {\n      // code to run on component unmount goes here\n      Reveal.destroy();  \n    }\n  }, []);\n\n  useEffect(() => {\n    const config = setupConfig(configStr)\n    Reveal.configure(config);\n  }, [configStr, args[\"allow_unsafe_html\"]]);\n\n  useEffect(() => {\n    if (Reveal.isReady()){\n      if (disabled){\n        Reveal.togglePause(true);\n        let viewport = Reveal.getViewportElement();\n        if (viewport){\n          viewport.style.pointerEvents = \"none\";\n          viewport.style.cursor = \"not-allowed\";\n          viewport.style.opacity = \"0.5\";\n        }\n      }\n      else {  \n        Reveal.togglePause(false);\n        let viewport = Reveal.getViewportElement();\n        if (viewport){\n          viewport.style.pointerEvents = \"auto\";\n          viewport.style.cursor = \"auto\";\n          viewport.style.opacity = \"1\";\n        }\n      }\n    }\n  }, [disabled]);\n\n  //To do: add support for commands (i.e. control slides from Streamlit)\n  //-----------------\n  // useEffect(() => {\n  //   const commands = JSON.parse(commandStr)\n  //   if (Array.isArray(commands) && commands.length > 0 && Reveal.isReady()){\n  //     commands.forEach((command: any) => {\n  //       if (typeof command === \"string\" && command in simpleCommands){\n  //         (simpleCommands as any)[command]();\n  //       }\n  //       else if (Array.isArray(command) && command.length > 0 && typeof command[0] === \"string\" && command[0] in commandsWithArgs){\n  //         if (command[0] === \"slide\"){\n  //           if (command.length === 3){\n  //             Reveal.slide(command[1], command[2]);\n  //           }\n  //           else if (command.length === 4){\n  //             Reveal.slide(command[1], command[2], command[3]);\n  //           }\n  //           else {\n  //             console.warn(\"Invalid slide command: slide command array must have 3 or 4 elements.\");\n  //           }\n  //         }\n  //         else {\n  //           (commandsWithArgs as any)[command[0]](command[1]);\n  //         }\n  //       }\n  //       else {\n  //         console.warn(\"Invalid command: command must be a string or an array containing a string as its first element.\");\n  //       }\n  //     });\n  //   }\n  //   else if (!Array.isArray(args[\"commands\"])) {\n  //     console.warn(\"Invalid commands property value: commands must be an array containing at least one command.\");\n  //   }\n  // }, [commandStr]);\n\n  /**\n   * resizeObserver observes changes in elements its given to observe and is used here\n   * to communicate to streamlit the height of the component that has changed\n   * so that streamlit can adjust the iframe containing the component accordingly.\n   */\n  const resizeObserver = new ResizeObserver((entries: any) => {\n    // If we know that the body will always fully contain our component (without cutting it off)\n    // then we can use docuemnt.body height instead\n    if (args[\"height\"] === \"auto\" || typeof args[\"height\"] !== \"number\"){\n      Streamlit.setFrameHeight((entries[0].contentBoxSize.blockSize ?? entries[0].contentRect.height)); \n      if (Reveal.isReady()){\n        Reveal.layout();\n      }\n    }\n    else {\n      Streamlit.setFrameHeight(args[\"height\"]);\n      if (Reveal.isReady()){\n        Reveal.layout();\n      }\n    }\n    \n  })\n\n  const observe = (divElem: any) => {\n    divElem ? resizeObserver.observe(divElem as HTMLDivElement) : resizeObserver.disconnect();\n  }\n\n  if (args[\"allow_unsafe_html\"]) {\n    return (\n      <div ref={observe} className=\"slides\" dangerouslySetInnerHTML={{__html: args[\"content\"]}}>\n      </div>\n    )\n  }\n  else {\n    return (\n      <div ref={observe} className=\"slides\">\n        <section data-markdown={\"\"} {...args[\"markdown_props\"]}>\n          <script type={\"text/template\"}>\n          {args[\"content\"]}\n          </script>\n        </section>\n      </div>\n    )\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(RevealSlides)\n",{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","severity":1,"message":"22","line":160,"column":6,"nodeType":"23","endLine":160,"endColumn":8,"suggestions":"24"},{"ruleId":"21","severity":1,"message":"25","line":165,"column":6,"nodeType":"23","endLine":165,"endColumn":44,"suggestions":"26"},{"ruleId":"21","severity":1,"message":"27","line":165,"column":18,"nodeType":"28","endLine":165,"endColumn":43},"no-native-reassign",["29"],"no-negated-in-lhs",["30"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'configStr' and 'setupConfig'. Either include them or remove the dependency array.","ArrayExpression",["31"],"React Hook useEffect has a missing dependency: 'setupConfig'. Either include it or remove the dependency array.",["32"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","no-global-assign","no-unsafe-negation",{"desc":"33","fix":"34"},{"desc":"33","fix":"35"},"Update the dependencies array to be: [configStr, setupConfig]",{"range":"36","text":"37"},{"range":"38","text":"37"},[5973,5975],"[configStr, setupConfig]",[6076,6114]]